pipeline {
    agent any
    tools {
        maven 'apache-maven-3.9.9'
        jdk 'JDK 21'
    }

    stages {
        // üßæ Stage 1: Metadata to help debug and trace the build in logs
        stage('Log Build Info') {
            steps {
                echo "================================================="
                echo "          BUILD & TEST METADATA"
                echo "================================================="
                echo "Job: ${env.JOB_NAME}"
                echo "Build Number: ${env.BUILD_NUMBER}"
                echo "Workspace: ${env.WORKSPACE}"
                echo "Triggered by: ${currentBuild.getBuildCauses()[0].shortDescription}"
                echo "Branch: ${env.BRANCH_NAME}"
                echo "Commit: ${env.GIT_COMMIT}"
                echo "================================================="
            }
        }

        // üß™ Confirm which Jenkinsfile is being used (helps when experimenting)
        stage('Confirm Jenkinsfile Source') {
            steps {
                bat "type Jenkinsfile-regression"
            }
        }

        // üßπ Clean old files from previous builds
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        // üì• Check out latest code from Git
        stage('Checkout SCM') {
            steps {
                checkout scm
                bat "type Jenkinsfile"  // Print active Jenkinsfile
            }
        }

        // üü° New Stage: Start Selenium Grid (Docker-based) locally before test execution
        stage('Start Selenium Grid') {
            steps {
                echo 'üü° Starting Docker-based Selenium Grid for parallel browser execution...'
                bat 'docker-compose -f docker-compose-grid.yml up -d'
                echo '‚úÖ Selenium Grid containers started.'
            }
        }

        // üí§ Optional: Add wait if needed (commented out)
        // stage('Wait for Grid Readiness') {
        //     steps {
        //         bat 'timeout /t 5'  // Wait for containers to fully initialize
        //     }
        // }

        // üöÄ Build the project and run tests using Grid (Grid flag passed as system property)
        stage('Build & Run Regression Tests') {
            steps {
                echo 'Running regression tests on PRODUCTION via Docker Grid...'
                bat "mvn clean test -P regression -Denv=PRODUCTION -Dtest.suite=regression -Dselenium.grid.enabled=true"
            }
        }
    }

    post {
        always {
            // üìÅ Archive all test reports regardless of pass/fail
            archiveArtifacts artifacts: 'reports/**', allowEmptyArchive: true

            // üßæ Publish the HTML report from ExtentReports
            publishHTML(
                reportName: 'Regression Test Report',
                reportDir: 'reports',
                reportFiles: 'index.html',
                keepAll: true,
                alwaysLinkToLastBuild: true,
                allowMissing: true
            )

            // üõë Tear down Selenium Grid containers after test run
            stage('Stop Selenium Grid') {
                steps {
                    echo 'üßπ Stopping and cleaning Docker Grid containers...'
                    bat 'docker-compose -f docker-compose-grid.yml down'
                    echo '‚úÖ Docker Grid shutdown complete.'
                }
            }

            // üß™ Qase.io Test Result Upload
            script {
                try {
                    echo '--- Starting Qase.io Integration ---'
                    def runId

                    withCredentials([string(credentialsId: 'qase-api-token', variable: 'QASE_TOKEN')]) {
                        echo '1. Creating a new Test Run on Qase...'
                        bat """
                            curl -s -X POST "https://api.qase.io/v1/run/FB" ^
                            -H "accept: application/json" ^
                            -H "Content-Type: application/json" ^
                            -H "Token: %QASE_TOKEN%" ^
                            -d "{\\"title\\":\\"${env.JOB_NAME} - Build ${env.BUILD_NUMBER}\\", \\"cases\\":[2]}" ^
                            -o response.json
                        """

                        def responseJson = readJSON file: 'response.json'

                        if (responseJson.status) {
                            runId = responseJson.result.id
                            echo "‚úÖ Successfully created Qase Test Run with ID: ${runId}"

                            echo "2. Uploading TestNG results to Qase..."
                            bat """
                                curl -s -X PATCH "https://api.qase.io/v1/result/FB/${runId}/testng" ^
                                -H "accept: application/json" ^
                                -H "Content-Type: multipart/form-data" ^
                                -H "Token: %QASE_TOKEN%" ^
                                -F "file=@target/surefire-reports/testng-results.xml"
                            """

                            echo "‚úÖ Test results uploaded."

                            echo "3. Marking Test Run as complete..."
                            bat """
                                curl -s -X POST "https://api.qase.io/v1/run/FB/${runId}/complete" ^
                                -H "accept: application/json" ^
                                -H "Token: %QASE_TOKEN%"
                            """
                            echo "‚úÖ Qase Test Run marked as complete."
                        } else {
                            echo "‚ö†Ô∏è Failed to create Qase Test Run. Response: ${responseJson}"
                        }
                    }
                } catch (Exception err) {
                    echo "‚ö†Ô∏è Exception during Qase.io integration: ${err.getMessage()}"
                }

                // üìß Email Notification Setup
                def suiteName = "regression"
                def reportToAttach = "reports/${suiteName}-report.html"
                def summaryFile = "reports/${suiteName}-failure-summary.txt"
                def failureSummary = fileExists(summaryFile) ? readFile(summaryFile).trim() : ""
                def reportURL = "${env.BUILD_URL}Regression-Test-Report/"

                def emailSubject
                def emailBody

                if (currentBuild.currentResult == 'SUCCESS') {
                    emailSubject = "‚úÖ SUCCESS: Nightly Regression Build #${env.BUILD_NUMBER} for ${env.JOB_NAME}"
                    emailBody = """<p>Nightly regression build was successful.</p><p><b><a href='${reportURL}'>üìÑ View Full Regression Report</a></b></p>"""
                } else {
                    emailSubject = "‚ùå FAILURE: Nightly Regression Build #${env.BUILD_NUMBER} for ${env.JOB_NAME}"
                    emailBody = """
                        <p><b>WARNING: The nightly regression build has failed.</b></p>
                        <p><b>Failure Summary:</b></p>
                        <pre style="background-color:#F5F5F5; border:1px solid #E0E0E0; padding:10px; font-family:monospace;">${failureSummary}</pre>
                        <p><b><a href='${reportURL}'>üìÑ View Full Regression Report</a></b></p>
                    """
                }

                withCredentials([string(credentialsId: 'recipient-email-list', variable: 'RECIPIENT_EMAILS')]) {
                    emailext(
                        subject: emailSubject,
                        body: emailBody,
                        to: RECIPIENT_EMAILS,
                        mimeType: 'text/html',
                        attachmentsPattern: reportToAttach
                    )
                }
            }
        }
    }
}
