@Library('my-automation-library') _
pipeline {
    agent any

    tools {
        maven 'apache-maven-3.9.9'
        jdk 'JDK 21'
    }

    parameters {
        // ‚úÖ Toggle switch to enable/disable manual approval gate
        booleanParam(name: 'MANUAL_APPROVAL', defaultValue: false, description: 'Enable this to pause the pipeline and require manual approval before running regression.')
    }

    stages {

        stage('Log Build Info') {
            steps {
                echo "================================================="
                echo "          BUILD & TEST METADATA"
                echo "================================================="
                echo "Job: ${env.JOB_NAME}"
                echo "Build Number: ${env.BUILD_NUMBER}"
                echo "Workspace: ${env.WORKSPACE}"
                echo "Triggered by: ${currentBuild.getBuildCauses()[0].shortDescription}"
                echo "Branch: ${env.BRANCH_NAME}"
                echo "Commit: ${env.GIT_COMMIT}"
                echo "================================================="
            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout SCM') {
            steps {
                checkout scm
                bat "type Jenkinsfile-regression"
            }
        }

        stage('Start Selenium Grid (Docker)') {
            steps {
                script {
                    // ‚úÖ Retry logic for flaky grid start failures
                    retry(2) {
                        echo "üü° Attempting to start Docker Grid..."
                        bat 'docker-compose -f docker-compose-grid.yml up -d'
                        bat 'ping -n 20 127.0.0.1 > NUL' // Windows wait
                    }
                }
            }
        }

        // ‚úÖ Optional Manual Gate before executing tests
        stage('Approval (Optional)') {
            when {
                expression { return params.MANUAL_APPROVAL }
            }
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    input message: 'üõë Proceed with Regression Execution?'
                }
            }
        }

        // ‚úÖ Parallel Test Stage (MUST be directly under stage -> parallel -> branches)
        stage('Run Parallel Regression Tests') {
            // Wrap the parallel block in a timeout to prevent hanging
            steps {
                timeout(time: 2, unit: 'HOURS') {
                    script {
                        parallel(
                            Chrome: {
                                echo 'üß™ Running regression tests on Chrome...'
                                bat """
                                    mvn clean test ^
                                    -P regression ^
                                    -Denv=PRODUCTION ^
                                    -Dtest.suite=regression ^
                                    -Dbrowser=CHROME ^
                                    -Dreport.dir=chrome ^
                                    -Dbrowser.headless=true ^
                                    -Dmaven.repo.local=.m2-chrome
                                """
                            },
                            Firefox: {
                                echo 'üß™ Running regression tests on Firefox...'
                                bat """
                                    mvn clean test ^
                                    -P regression ^
                                    -Denv=PRODUCTION ^
                                    -Dtest.suite=regression ^
                                    -Dbrowser=FIREFOX ^
                                    -Dreport.dir=firefox ^
                                    -Dbrowser.headless=true ^
                                    -Dmaven.repo.local=.m2-firefox
                                """
                            }
                        )
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üì¶ Archiving reports and publishing HTML dashboards...'

            // ‚úÖ Generate dashboard with test summary
            script {
                def suiteName = "regression"
                def summaryFile = "reports/${suiteName}-failure-summary.txt"
                def hasFailures = fileExists(summaryFile) && readFile(summaryFile).trim().toLowerCase().contains("failed")

                def failureSummary = hasFailures ? readFile(summaryFile).trim() : "‚úÖ All tests passed."
                def failureHeader = hasFailures ? "‚ùå Failure Summary" : "‚úÖ Test Result Summary"
                def failureBoxColor = hasFailures ? "#fff3f3" : "#f3fff3"
                def failureBorderColor = hasFailures ? "#f44336" : "#4CAF50"
                def failureTextColor = hasFailures ? "#c62828" : "#2e7d32"

                writeFile file: 'reports/index.html', text: """
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Regression Test Dashboard</title>
                    <style>
                        body { font-family: Arial; padding: 20px; background-color: #f7f7f7; }
                        h1 { color: #222; }
                        ul { list-style-type: none; padding-left: 0; }
                        li { margin: 10px 0; }
                        a { color: #1976D2; font-size: 16px; text-decoration: none; }
                        a:hover { text-decoration: underline; }
                        .summary-box {
                            background-color: ${failureBoxColor};
                            border-left: 6px solid ${failureBorderColor};
                            padding: 10px;
                            margin-top: 20px;
                            white-space: pre-line;
                            font-family: monospace;
                            color: ${failureTextColor};
                        }
                    </style>
                </head>
                <body>
                    <h1>üìä Regression Test Dashboard</h1>
                    <ul>
                        <li>üß™ <a href="chrome/index.html" target="_blank">Chrome Report</a></li>
                        <li>üß™ <a href="firefox/index.html" target="_blank">Firefox Report</a></li>
                    </ul>
                    <p><strong>Build:</strong> #${env.BUILD_NUMBER}</p>
                    <h2>${failureHeader}</h2>
                    <div class="summary-box">${failureSummary}</div>
                </body>
                </html>
                """
            }

            // ‚úÖ Archive test results and logs
            archiveArtifacts artifacts: 'reports/**', allowEmptyArchive: true
            archiveArtifacts artifacts: 'logs/**', allowEmptyArchive: true

            // ‚úÖ Publish HTML reports for each browser
            publishHTML([
                reportName: 'Chrome Report',
                reportDir: 'reports/chrome',
                reportFiles: 'index.html',
                keepAll: true, alwaysLinkToLastBuild: true, allowMissing: true
            ])
            publishHTML([
                reportName: 'Firefox Report',
                reportDir: 'reports/firefox',
                reportFiles: 'index.html',
                keepAll: true, alwaysLinkToLastBuild: true, allowMissing: true
            ])
            publishHTML([
                reportName: 'Cumulative Dashboard',
                reportDir: 'reports',
                reportFiles: 'index.html',
                keepAll: true, alwaysLinkToLastBuild: true, allowMissing: true
            ])

            // üßπ Tear down Selenium Grid
            script {
                echo "üßπ Stopping Docker Selenium Grid..."
                bat 'docker-compose -f docker-compose-grid.yml down || echo "‚ö†Ô∏è Grid already stopped or not found."'

                // ‚úÖ Qase Integration
				updateQase(
					projectCode: 'FB',
					credentialsId: 'qase-api-token',
					testCaseIds: '[1, 2]'
				)

                // ‚úÖ Email Notifications
                def suiteName = "regression"
                def summaryFile = "reports/${suiteName}-failure-summary.txt"
                def failureSummary = fileExists(summaryFile) ? readFile(summaryFile).trim() : ""
                def reportURL = "${env.BUILD_URL}Cumulative-Dashboard/"

                def emailSubject, emailBody
                if (currentBuild.currentResult == 'SUCCESS') {
                    emailSubject = "‚úÖ SUCCESS: Nightly Regression Build #${env.BUILD_NUMBER} for ${env.JOB_NAME}"
                    emailBody = """
                        <p>Nightly regression build was successful.</p>
                        <p><b><a href='${reportURL}'>üìÑ View Cumulative Regression Dashboard</a></b></p>
                    """
                } else {
                    emailSubject = "‚ùå FAILURE: Nightly Regression Build #${env.BUILD_NUMBER} for ${env.JOB_NAME}"
                    emailBody = """
                        <p><b>WARNING: The nightly regression build has failed.</b></p>
                        <p><b>Failure Summary:</b></p>
                        <pre style="background-color:#F5F5F5; border:1px solid #E0E0E0; padding:10px; font-family:monospace;">${failureSummary}</pre>
                        <p><b><a href='${reportURL}'>üìÑ View Cumulative Regression Dashboard</a></b></p>
                    """
                }

                withCredentials([string(credentialsId: 'recipient-email-list', variable: 'RECIPIENT_EMAILS')]) {
                    emailext(
                        subject: emailSubject,
                        body: emailBody,
                        to: RECIPIENT_EMAILS,
                        mimeType: 'text/html',
                        attachmentsPattern: "reports/${suiteName}-report.html"
                    )
                }
            }
        }

        failure {
            echo '‚ö†Ô∏è Build failed. Cleaning up Selenium containers...'
            script {
                try {
                    def result = bat(script: 'docker ps -a --filter "name=selenium" --format "{{.Names}}"', returnStdout: true).trim()
                    if (result) {
                        echo "üõë Stopping containers:\n${result}"
                        bat 'docker-compose -f docker-compose-grid.yml down || echo "Grid already stopped"'
                    } else {
                        echo "‚úÖ No active Selenium containers to stop."
                    }
                } catch (e) {
                    echo "‚ö†Ô∏è Docker cleanup error: ${e.getMessage()}"
                }
            }
        }
    }
}
