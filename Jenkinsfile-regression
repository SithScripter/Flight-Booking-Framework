pipeline {
    agent any

    tools {
        maven 'apache-maven-3.9.9'
        jdk 'JDK 21'
    }

    stages {
        stage('Log Build Info') {
            steps {
                echo "================================================="
                echo "          BUILD & TEST METADATA"
                echo "================================================="
                echo "Job: ${env.JOB_NAME}"
                echo "Build Number: ${env.BUILD_NUMBER}"
                echo "Workspace: ${env.WORKSPACE}"
                echo "Triggered by: ${currentBuild.getBuildCauses()[0].shortDescription}"
                echo "Branch: ${env.BRANCH_NAME}"
                echo "Commit: ${env.GIT_COMMIT}"
                echo "================================================="
            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout SCM') {
            steps {
                checkout scm
                bat "type Jenkinsfile"
            }
        }

        stage('Start Selenium Grid (Docker)') {
            steps {
                echo "üîÑ Starting Dockerized Selenium Grid..."
                bat 'docker-compose -f docker-compose-grid.yml up -d'
                bat 'ping -n 20 127.0.0.1 > NUL'
            }
        }

        stage('Run Parallel Regression Tests') {
            parallel {
                stage('Test on Chrome') {
                    steps {
                        echo 'Running regression tests on Chrome...'
                        bat 'mvn clean test -P regression -Denv=PRODUCTION -Dtest.suite=regression -Dbrowser=CHROME -Dreport.dir=chrome -Dbrowser.headless=true -Dtarget.folder=target-chrome -Duser.dir=%WORKSPACE%'
                        bat 'dir /s reports'
                    }
                }
                stage('Test on Firefox') {
                    steps {
                        echo 'Running regression tests on Firefox...'
                        bat 'mvn clean test -P regression -Denv=PRODUCTION -Dtest.suite=regression -Dbrowser=FIREFOX -Dreport.dir=firefox -Dbrowser.headless=true -Dtarget.folder=target-firefox -Duser.dir=%WORKSPACE%'
                        bat 'dir /s reports'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üì¶ Archiving reports and publishing HTML dashboards...'

            // Archive all browser reports
            archiveArtifacts artifacts: 'reports/**', allowEmptyArchive: true

            // Individual browser reports
            publishHTML([
                reportName: 'Chrome Report',
                reportDir: 'reports/chrome',
                reportFiles: 'regression-chrome-report.html',
                keepAll: true, alwaysLinkToLastBuild: true, allowMissing: true
            ])
            publishHTML([
                reportName: 'Firefox Report',
                reportDir: 'reports/firefox',
                reportFiles: 'regression-firefox-report.html',
                keepAll: true, alwaysLinkToLastBuild: true, allowMissing: true
            ])

            // Cumulative report
            publishHTML([
                reportName: 'Cumulative Dashboard',
                reportDir: 'reports',
                reportFiles: 'index.html',
                keepAll: true, alwaysLinkToLastBuild: true, allowMissing: true
            ])

            // Stop Grid
            script {
                echo "üßπ Stopping Docker Selenium Grid..."
                bat 'docker-compose -f docker-compose-grid.yml down || echo "‚ö†Ô∏è Grid already stopped or not found."'

                // Qase Integration
                try {
                    echo '--- Starting Qase.io Integration ---'
                    def runId

                    withCredentials([string(credentialsId: 'qase-api-token', variable: 'QASE_TOKEN')]) {
                        echo '1. Creating a new Test Run...'
                        bat """
                            curl -s -X POST "https://api.qase.io/v1/run/FB" ^
                            -H "accept: application/json" ^
                            -H "Content-Type: application/json" ^
                            -H "Token: %QASE_TOKEN%" ^
                            -d "{\\"title\\":\\"${env.JOB_NAME} - Build ${env.BUILD_NUMBER}\\", \\"cases\\":[2]}" ^
                            -o response.json
                        """
                        def responseJson = readJSON file: 'response.json'

                        if (responseJson.status) {
                            runId = responseJson.result.id
                            echo "‚úÖ Qase Test Run ID: ${runId}"

                            echo "2. Uploading results to Qase..."
                            bat """
                                curl -s -X PATCH "https://api.qase.io/v1/result/FB/${runId}/testng" ^
                                -H "accept: application/json" ^
                                -H "Content-Type: multipart/form-data" ^
                                -H "Token: %QASE_TOKEN%" ^
                                -F "file=@target/surefire-reports/testng-results.xml"
                            """

                            echo "3. Marking Qase run as complete..."
                            bat """
                                curl -s -X POST "https://api.qase.io/v1/run/FB/${runId}/complete" ^
                                -H "accept: application/json" ^
                                -H "Token: %QASE_TOKEN%"
                            """
                            echo "‚úÖ Qase run marked as complete."
                        } else {
                            echo "‚ö†Ô∏è Qase error during run creation. Response: ${responseJson}"
                        }
                    }
                } catch (Exception err) {
                    echo "‚ö†Ô∏è Exception in Qase integration: ${err.getMessage()}"
                }

                // Email Notification
                def suiteName = "regression"
                def reportToAttach = "reports/${suiteName}-report.html"
                def summaryFile = "reports/${suiteName}-failure-summary.txt"
                def failureSummary = fileExists(summaryFile) ? readFile(summaryFile).trim() : ""
                def reportURL = "${env.BUILD_URL}Cumulative-Dashboard/"

                def emailSubject
                def emailBody

                if (currentBuild.currentResult == 'SUCCESS') {
                    emailSubject = "‚úÖ SUCCESS: Nightly Regression Build #${env.BUILD_NUMBER} for ${env.JOB_NAME}"
                    emailBody = """
                        <p>Nightly regression build was successful.</p>
                        <p><b><a href='${reportURL}'>üìÑ View Cumulative Regression Dashboard</a></b></p>
                    """
                } else {
                    emailSubject = "‚ùå FAILURE: Nightly Regression Build #${env.BUILD_NUMBER} for ${env.JOB_NAME}"
                    emailBody = """
                        <p><b>WARNING: The nightly regression build has failed.</b></p>
                        <p><b>Failure Summary:</b></p>
                        <pre style="background-color:#F5F5F5; border:1px solid #E0E0E0; padding:10px; font-family:monospace;">${failureSummary}</pre>
                        <p><b><a href='${reportURL}'>üìÑ View Cumulative Regression Dashboard</a></b></p>
                    """
                }

                withCredentials([string(credentialsId: 'recipient-email-list', variable: 'RECIPIENT_EMAILS')]) {
                    emailext(
                        subject: emailSubject,
                        body: emailBody,
                        to: RECIPIENT_EMAILS,
                        mimeType: 'text/html',
                        attachmentsPattern: reportToAttach
                    )
                }
            }
        }

        failure {
            echo '‚ö†Ô∏è Build failed. Cleaning up any running Selenium Grid containers...'
            script {
                try {
                    def result = bat(script: 'docker ps -a --filter "name=selenium" --format "{{.Names}}"', returnStdout: true).trim()
                    if (result) {
                        echo "üõë Stopping containers:\n${result}"
                        bat 'docker-compose -f docker-compose-grid.yml down || echo "Grid already stopped"'
                    } else {
                        echo "‚úÖ No active Selenium containers to stop."
                    }
                } catch (e) {
                    echo "‚ö†Ô∏è Docker cleanup error: ${e.getMessage()}"
                }
            }
        }
    }
}
