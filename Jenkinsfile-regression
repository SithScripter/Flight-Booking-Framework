pipeline {
    agent any
    tools {
        maven 'apache-maven-3.9.9'
        jdk 'JDK 21'
    }
    stages {
		// Stage 1: for providing LOg Build Info-good for debugging
		stage('Log Build Info')
		{
			steps
			{
				// This 'echo' step prints a clear header to the console log for easy reading.
				echo "================================================="
				echo "          BUILD & TEST METADATA"
				echo "================================================="
				// Jenkins provides environment variables that give us context about the build.
				echo "Job: ${env.JOB_NAME}"
				echo "Build Number: ${env.BUILD_NUMBER}"
				echo "Workspace: ${env.WORKSPACE}"
				// The 'currentBuild' global variable gives us more detailed information about the trigger.
				echo "Triggered by: ${currentBuild.getBuildCauses()[0].shortDescription}"
				// For Git-based projects, Jenkins provides specific SCM variables.
				echo "Branch: ${env.BRANCH_NAME}"
				echo "Commit: ${env.GIT_COMMIT}"
				echo "================================================="
			}
		}
		stage('Confirm Jenkinsfile Source') {
			steps {
				bat "type Jenkinsfile-regression"
			}
		}
        stage('Clean Workspace') { steps { cleanWs() } }
		stage('Checkout SCM') {
			steps {
			  checkout scm
			  bat "type Jenkinsfile"  // ‚Üê Print the Jenkinsfile being executed
			}
		  }
        stage('Build & Run Regression Tests') {
            steps {
                echo 'Running regression tests on QA...'
                bat "mvn clean test -P regression -Denv=PRODUCTION -Dtest.suite=regression"
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'reports/**', allowEmptyArchive: true
            publishHTML(reportName: 'Regression Test Report', reportDir: 'reports', reportFiles: 'index.html', keepAll: true, alwaysLinkToLastBuild: true, allowMissing: true)
            
            script {
                // --- Qase.io Integration ---
				try
				{
					echo '--- Starting Qase.io Integration ---'
					def runId

					withCredentials([
						string(credentialsId: 'qase-api-token', variable: 'QASE_TOKEN')
					])
					{
						// Step 1: Create the Test Run
						echo '1. Creating a new Test Run...'
						bat """
                curl -s -X POST "https://api.qase.io/v1/run/FB" ^
                -H "accept: application/json" ^
                -H "Content-Type: application/json" ^
                -H "Token: %QASE_TOKEN%" ^
                -d "{\\"title\\":\\"${env.JOB_NAME} - Build ${env.BUILD_NUMBER}\\", \\"cases\\":[2]}" ^
                -o response.json
            """
						def responseJson = readJSON file: 'response.json'

						if (responseJson.status)
						{
							runId = responseJson.result.id
							echo "‚úÖ Successfully created Qase Test Run with ID: ${runId}"

							// Step 2: Upload TestNG results to the correct endpoint using PATCH
							echo "2. Uploading TestNG results to Run ID: ${runId}..."
							bat """
                    curl -s -X PATCH "https://api.qase.io/v1/result/FB/${runId}/testng" ^
                    -H "accept: application/json" ^
                    -H "Content-Type: multipart/form-data" ^
                    -H "Token: %QASE_TOKEN%" ^
                    -F "file=@target/surefire-reports/testng-results.xml"
                """
							echo "‚úÖ Test results uploaded to Qase.io."

							// Step 3: Mark the Test Run as complete
							echo "3. Marking Qase Test Run as complete..."
							bat """
                    curl -s -X POST "https://api.qase.io/v1/run/FB/${runId}/complete" ^
                    -H "accept: application/json" ^
                    -H "Token: %QASE_TOKEN%"
                """
							echo "‚úÖ Qase Test Run ${runId} marked as complete."
						} else
						{
							echo "‚ö†Ô∏è Warning: Qase API returned an error during run creation. Response: ${responseJson}"
						}
					}
				} catch (Exception err)
				{
					echo "‚ö†Ô∏è Warning: An exception occurred during Qase.io integration. Error: ${err.getMessage()}"
				}

                // --- Email Notification Logic ---
				def suiteName = "regression"
//                def reportToAttach = 'reports/regression-report.html'
				def reportToAttach = "reports/${suiteName}-report.html"
				
//                def summaryFile = 'reports/regression-failure-summary.txt'
				def summaryFile = "reports/${suiteName}-failure-summary.txt"
				
                def failureSummary = fileExists(summaryFile) ? readFile(summaryFile).trim() : ""
//                def reportURL = "${env.BUILD_URL}Regression-Test-Report/"
				def reportURL = "${env.BUILD_URL}Regression-Test-Report/"

                def emailSubject
                def emailBody

                if (currentBuild.currentResult == 'SUCCESS') {
                    emailSubject = "‚úÖ SUCCESS: Nightly Regression Build #${env.BUILD_NUMBER} for ${env.JOB_NAME}"
                    emailBody = """<p>Nightly regression build was successful.</p><p><b><a href='${reportURL}'>üìÑ View Full Regression Report</a></b></p>"""
                } else {
                    emailSubject = "‚ùå FAILURE: Nightly Regression Build #${env.BUILD_NUMBER} for ${env.JOB_NAME}"
                    emailBody = """
                        <p><b>WARNING: The nightly regression build has failed.</b></p>
                        <p><b>Failure Summary:</b></p>
                        <pre style="background-color:#F5F5F5; border:1px solid #E0E0E0; padding:10px; font-family:monospace;">${failureSummary}</pre>
                        <p><b><a href='${reportURL}'>üìÑ View Full Regression Report</a></b></p>
                    """
                }

                withCredentials([string(credentialsId: 'recipient-email-list', variable: 'RECIPIENT_EMAILS')]) {
                    emailext(
                        subject: emailSubject,
                        body: emailBody,
                        to: RECIPIENT_EMAILS,
                        mimeType: 'text/html',
                        attachmentsPattern: reportToAttach
                    )
                }
            }
        }
    }
}