@Library('my-automation-library') _

pipeline {
    // We define no top-level agent. Each stage will define its own.
    agent none 

    options {
        skipDefaultCheckout()
    }

    parameters {
        // Kept your parameters for environment and the manual approval gate
        choice(name: 'TARGET_ENVIRONMENT', choices: ['PRODUCTION', 'STAGING', 'QA'], description: 'Select environment')
        booleanParam(name: 'MANUAL_APPROVAL', defaultValue: false, description: 'Enable this to pause before running regression.')
        string(name: 'QASE_TEST_CASE_IDS', defaultValue: '[1, 2]', description: 'Comma-separated Qase Test Case IDs')
    }

    stages {
        stage('Initialize & Start Grid') {
            // This stage only runs on the 'enhancements' branch
            when { branch 'enhancements' }
            agent {
                docker {
                    image 'flight-booking-agent:latest'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""'
                }
            }
            steps {
                cleanWs()
                checkout scm
                printBuildMetadata('regression') // Using our shared library function
                
                // Using your retry logic with the shared library function
                retry(2) {
                    startDockerGrid('docker-compose-grid.yml', 20)
                }
            }
        }

        stage('Approval Gate (Optional)') {
            when {
                allOf {
                    branch 'enhancements'
                    expression { return params.MANUAL_APPROVAL }
                }
            }
            // This simple input stage can run on any available agent
            agent any 
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    input message: 'üõë Proceed with full regression execution?'
                }
            }
        }

        stage('Build & Run Parallel Regression Tests') {
            when { branch 'enhancements' }
            agent {
                docker {
                    image 'flight-booking-agent:latest'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint="" --network=selenium_grid_network'
                }
            }
            steps {
                timeout(time: 2, unit: 'HOURS') {
                    script {
                        // Your parallel execution logic, converted to 'sh'
                        def baseMvnCommand = """
                            mvn clean test \
                            -P regression \
                            -Denv=${params.TARGET_ENVIRONMENT} \
                            -Dtest.suite=regression \
                            -Dbrowser.headless=true
                        """
                        parallel(
                            Chrome: {
                                echo 'üß™ Running regression tests on Chrome...'
                                sh "${baseMvnCommand} -Dbrowser=CHROME -Dreport.dir=chrome -Dmaven.repo.local=.m2-chrome"
                            },
                            Firefox: {
                                echo 'üß™ Running regression tests on Firefox...'
                                sh "${baseMvnCommand} -Dbrowser=FIREFOX -Dreport.dir=firefox -Dmaven.repo.local=.m2-firefox"
                            }
                        )
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                docker.image('flight-booking-agent:latest').inside('-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""') {
                    
                    // Conditionally stop the grid only on the target branch
                    if (env.BRANCH_NAME == 'enhancements') {
						echo 'üßπ Tearing down Selenium Grid...'
                        stopDockerGrid('docker-compose-grid.yml')
                    }
                    
                    generateDashboard("regression", "${env.BUILD_NUMBER}")
                    archiveAndPublishReports()

                    if (env.BRANCH_NAME == 'enhancements') {
                        updateQase(
                            projectCode: 'FB',
                            credentialsId: 'qase-api-token',
                            testCaseIds: params.QASE_TEST_CASE_IDS
                        )
                        sendBuildSummaryEmail(
                            suiteName: 'regression',
                            emailCredsId: 'recipient-email-list'
                        )
                    } else {
                        echo "‚ÑπÔ∏è Skipping notifications for branch: ${env.BRANCH_NAME}"
                    }
                }
            }
        }
		        failure {
            script {
                docker.image('flight-booking-agent:latest').inside('-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""') {
                    echo '‚ö†Ô∏è Build failed. Checking for running Selenium containers...'
                    try {
                        def result = sh(script: 'docker ps -a --filter "name=selenium" --format "{{.Names}}"', returnStdout: true).trim()
                        if (result) {
                            echo "üõë Stopping containers:\n${result}"
                            stopDockerGrid('docker-compose-grid.yml')
                        } else {
                            echo "‚úÖ No active Selenium containers to stop."
                        }
                    } catch (e) {
                        echo "‚ö†Ô∏è Docker cleanup error: ${e.getMessage()}"
                    }
                }
            }
        }
    }
}